function map=pmkmp(n,scheme)% PMKMP Returns perceptually balanced colormaps with rainbow-like colors%   PMKMP(N,SCHEME) returns an Nx3 colormap.%   usage: map=pmkmp(n,scheme);%% JUSTIFICATION: rainbow, or spectrum color schemes are considered a poor% choice for scientific data display by many in the scientific community% (see for example reference 1 and 2) in that they introduce artifacts% that mislead the viewer. "The rainbow color map appears as if it’s separated% into bands of almost constant hue, with sharp transitions between hues.% Viewers perceive these sharp transitions as sharp transitions in the data,% even when this is not the casein how regularly spaced (interval) data are% displayed (quoted from reference 1). This submission is intended to share% the results of my work to create more perceptually balanced,% rainbow-like color maps. Please see output arguments section for descriptions.%%%   arguments: (input)%   scheme - can be one of the following strings:%     'IsoL'      Lab-based isoluminant rainbow with constant lightness L*=60%                  For interval data displayed with external lighting%%     'IsoAZ'      Lightness-Chroma-Hue based isoluminant rainbow going%                  around the full Hue circle.%                  For azimuthal and phase data.%%     'IsoAZ180'   Lightness-Chroma-Hue based isoluminant rainbow going%                  around the full Hue circle twice. For azimuthal and%                  phase data where information 180 degrees apart is%                  equivalent, for example facture orientation.%%     'LinearL'	  Lab-based linear lightness rainbow.%                  For interval data displayed without external lighting%                  100% perceptual%%     'LinLhot'	  Linear lightness modification of Matlab's hot color palette.%                  For interval data displayed without external lighting%                  100% perceptual%%     'CubicYF'	   Lab-based rainbow scheme with cubic-law lightness(default)%                  For interval data displayed without external lighting%                  100% perceptual%%     'CubicL'	   Lab-based rainbow scheme with cubic-law lightness%                  For interval data displayed without external lighting%                  As above but has red at high end (a modest deviation from%                  100% perceptual)%%     'Swtth'      Lab-based rainbow scheme with sawtooth-shaped lightness%                  lightness profile. For hardcore rainbow fans.%%     'Edge'       Diverging Black-blue-cyan-white-yellow-red-black scheme%                  For ratio data (ordered, constant scale, natural zero)%%   n - scalar specifying number of points in the colorbar. Maximum n=256%      If n is not specified, the size of the colormap is determined by the%      current figure. If no figure exists, MATLAB creates one.%%%   arguments: (output)%   map - colormap of the chosen scheme%   - IsoL is based on work in paper 2 in the reference section.%     In both this paper and in several others this is indicated as the%     best for displaying interval data with external lighting.%     This is so as to allow the lighting to provide the shading to%     highlight the details of interest. If lighting is combined with a%     colormap that has its own lightness function associated - even as%     simple as a linear increase this will confuse the viewer. The only%     difference from the paper is that I changed the value of constant%     lightness to L*=60 to make it brighter that the authors' example.%%   -  IsoAZ is a Lightness-Chroma-Hue based isoluminant rainbow that%      goes around the full Hue circle.For azimuthal and phase data.%      Created with code snippet below. This is a modification from an example%      by Steve Eddins on his Matlab central blog (reference 15). Steve had%      lightness increasing while as hue changed. I hold the ligthness%      constant instead to make the result isoluminant. I also use the%      Colorspace transformations function instead of the Image Processing%      Toolbox for the color conversion. Please read my blog post below for%      some examples and code snippets:%      mycarta.wordpress.com/2014/10/30/new-matlab-isoluminant-colormap-for-azimuth-data/%%   -  IsoAZ180. Very similar to the above, but full range of hues repats%      twice. Please read my blog post below:%      mycarta.wordpress.com/2014/10/30/new-matlab-isoluminant-colormap-for-azimuth-data/%%   - LinearL is a linear lightness modification of another palette from%     paper 2 in the reference. For how it was generated see my blog post:%     mycarta.wordpress.com/2012/12/06/the-rainbow-is-deadlong-live-the-rainbow-part-5-cie-lab-linear-l-rainbow/%%   - LinLhot is a linear lightness modification of Matlab's hot%     color palette. For how it was generated see my blog post:%     mycarta.wordpress.com/2012/10/14/the-rainbow-is-deadlong-live-the-rainbow-part-4-cie-lab-heated-body/%%   - CubicL too is based on some of the ideas in paper 2 in the%      reference section but rather than using a linearly increasing%      L* function such as the one used by those authors, I am%      using a compressive or cubic law function for the increase in%      L*.  L* ranges between 31 and 90 in the violet to yellowish%      portion of the colormap, then decreases to about 80 to get%      to the red (please refer to figure L_a_b_PlotsCubicL.png).%      The choice to start at 31 was a matter of taste.%      I like having violet instead of black at the cold end of the%      colormap. The latter choice was so as to have red and not%      white at the warm end  of the colorbar, which is also a%      matter of personal taste. As a result,  there is an inversion in%      the L* trend, but I believe because it is a smooth one that%      this is an acceptable compromise and the resulting%      colormap is much of an improvement over the standard%      rainbow or spectrum schemes, which  typically have at least 3 sharp%      L* inversions. Please see figures:%      L_plot_for_CubicL_colormap.png, L_plot_for_jet_colormap.png,%      and L_plot_for_spectrum_colormap.png for a demonstration.%%    - CubicYF A fully perceptual version of the above in which I eliminated%      the red tip at the high end. The work is described in papers 12 and 13.%      I've uploaded 2 figures. The first, spectrum vs cubicYF.png, is a comparison%      of lightness versus sample number for the spectrum (top left) and the%      new color palette (bottom left), and also a comparison of test surface%      (again the Great Pyramid of Giza)using the spectrum (top right)and%      the new color palette (bottom right). The second figure%      simulations color vision deficieny.png%      is a comparison of spectrum and cubicYF rainbow for all viewers.%      Left column: full color vision – for the spectrum (top left) and for the%      cubeYF rainbow (bottom left). Centre column: simulation of Deuternaopia%      for spectrum (top centre) and cubeYF rainbow (bottom centre).%      Right column: simulation of Tritanopia for spectrum (top right) and%      cubeYF rainbow (bottom right). For the cubeYF there are no%      confusing color pairs in these simulations. There are several in the%      spectrum. Please refer to reference 14 for vcolor vision deficiency%      terminoligy. For how it was generated see my blog post:%      http://mycarta.wordpress.com/2013/02/21/perceptual-rainbow-palette-the-method/%%   -  Swtth  Lab-based rainbow scheme with sawtooth-shaped lightness%      lightness profile is made up of 5 identical ramps with magnitude of%      lightness change set to 60, and alternatively negative and positive%      signs. Please compare the two profiles in L_profile_sawtooth_rainbow.png%      and L_profile_basic_rainbow.png, and also compare results on the%      Great Pyramid of Gizah in Pyramid_sawtooth_rainbow.png and%      Pyramid_basic_rainbow.png. Read more at:%      http://mycarta.wordpress.com/2014/11/13/new-rainbow-colormap-sawthoot-shaped-lightness-profile/%%   - Edge is based on the Goethe Edge Colors described in the book in%     reference 3. In practice the colormap resembles a cold color map attached%     to a warm color map. But the science behind it is rigorous and the%     experimental work is based on is very intriguing to me: an alternative%     to the Newtonian spectrum. This is not perceptually balanced in a%     strict sense but because it does not have green it is perceptually%     improved in a harmonious sense (refer to paper reference 10 for a review%     of the concept of harmony in color visualization).%%   Example1: 128-color rainbow with cubic-law lightness (default)%     %  load mandrill;%     %  imagesc(X);%     %  colormap(pmkmp(128));%     %  colorbar;%%   Example2: 128-color palette for azimuthal data%     %  a=0:8:360;%     %  b = repmat(a,[46 1]);%     %  imagesc(b);%     %  colormap(pmkmp(128,'IsoAZ'));%     %  colorbar;%%   See files examples.m, examples1.m, and example2.m for more examples.%%%   See also: JET, HSV, GRAY, HOT, COOL, BONE, COPPER, PINK, FLAG, PRISM,%             COLORMAP, RGBPLOT%%%   Other submissions of interest%%     Matlab's new Parula colormap%     http://blogs.mathworks.com/steve/2014/10/13/a-new-colormap-for-matlab-part-1-introduction/%%     Haxby color map%     www.mathworks.com/matlabcentral/fileexchange/25690-haxby-color-map%%     Colormap and colorbar utilities%     www.mathworks.com/matlabcentral/fileexchange/24371-colormap-and-color%     bar-utilities-sep-2009%%     Lutbar%     www.mathworks.com/matlabcentral/fileexchange/9137-lutbar-a-pedestrian-colormap-toolbarcontextmenu-creator%%     usercolormap%     www.mathworks.com/matlabcentral/fileexchange/7144-usercolormap%%     freezeColors%     www.mathworks.com/matlabcentral/fileexchange/7943%%%     Bipolar Colormap%     www.mathworks.com/matlabcentral/fileexchange/26026%%     colorGray%     www.mathworks.com/matlabcentral/fileexchange/12804-colorgray%%     mrgb2gray%     www.mathworks.com/matlabcentral/fileexchange/5855-mrgb2gray%%     CMRmap%     www.mathworks.com/matlabcentral/fileexchange/2662-cmrmap-m%%     real2rgb & colormaps%     www.mathworks.com/matlabcentral/fileexchange/23342-real2rgb-colormaps%%     ColorBrewer: Attractive and Distinctive Colormaps%     http://www.mathworks.com/matlabcentral/fileexchange/45208-colorbrewer--attractive-and-distinctive-colormaps%%   Acknowledgements%%     For input to do this research I was inspired by:%     ColorSpiral - http://bsp.pdx.edu/Software/ColorSpiral.m%     Despite an erroneous assumption about conversion/equivalence to%     grayscale (which CMRmap achieves correctly) the main idea is ingenious%     and the code is well written. It also got me interested in perceptual%     colormaps. See reference 5 for paper%%     For function architecture and code syntax I was inspired by:%     Light Bartlein Color Maps%     www.mathworks.com/matlabcentral/fileexchange/17555%     (and comments posted therein)%%     For idea on world topgraphy in examples.m I was inspired by:%     Cold color map%     www.mathworks.cn/matlabcentral/fileexchange/23865-cold-colormap%%     To generate the spectrum in examples1.m I used:%     Spectral and XYZ Color Functions%     www.mathworks.com/matlabcentral/fileexchange/7021-spectral-and-xyz-color-functions%%     For Lab=>RGB conversions I used:%     Colorspace transforamtions%     www.mathworks.com/matlabcentral/fileexchange/28790-colorspace-transformations%%%     For the figures in example 2 I used:%     Shaded pseudo color%     http://www.mathworks.cn/matlabcentral/fileexchange/14157-shaded-pseudo-color%%     For plots in CompareLabPlotsUsingColorspace.m I used:%     cline%     http://www.mathworks.cn/matlabcentral/fileexchange/14677-cline%%     For some ideas in general on working in Lab space:%     Color scale%     www.mathworks.com/matlabcentral/fileexchange/11037%     http://blogs.mathworks.com/steve/2006/05/09/a-lab-based-uniform-color-scale/%%     A great way to learn more about improved colormaps and making colormaps:%     MakeColorMap%     www.mathworks.com/matlabcentral/fileexchange/17552%     blogs.mathworks.com/videos/2007/11/15/practical-example-algorithm-development-for-making-colormaps/%%%  References%%     1)  Borland, D. and Taylor, R. M. II (2007) - Rainbow Color Map (Still)%         Considered Harmful%         IEEE Computer Graphics and Applications, Volume 27, Issue 2%         Pdf paper included in submission%%%     2)  Kindlmann, G. Reinhard, E. and Creem, S. Face-based lightness Matching%         for Perceptual Colormap Generation%         IEEE - Proceedings of the conference on Visualization '02%         www.cs.utah.edu/~gk/papers/vis02/FaceLumin.pdf%%     3)  Koenderink, J. J. (2010) - Color for the Sciences%         MIT press, Cambridge, Massachusset%%     4)  Light, A. and Bartlein, P.J. (2004) - The end of the rainbow?%         Color schemes for improved data graphics.%         EOS Transactions of the American Geophysical Union 85 (40)%         Reprint of Article with Comments and Reply%         http://geography.uoregon.edu/datagraphics/EOS/Light-and-Bartlein.pdf%%     5)  McNames, J. (2006) An effective color scale for simultaneous color%         and gray-scale publications%         IEEE Signal Processing Magazine, Volume 23, Issue1%         http://bsp.pdx.edu/Publications/2006/SPM_McNames.pdf%%     6)  Rheingans, P.L. (2000), Task-based Color Scale Design%         28th AIPR Workshop: 3D Visualization for Data Exploration and Decision Making%         www.cs.umbc.edu/~rheingan/pubs/scales.pdf.gz%%     7)  Rogowitz, B.E. and  Kalvin, A.D. (2001) - The "Which Blair project":%         a quick visual method for evaluating perceptual color maps.%         IEEE - Proceedings of the conference on Visualization ‘01%         www.research.ibm.com/visualanalysis/papers/WhichBlair-Viz01Rogowitz_Kalvin._final.pdf%%     8)  Rogowitz, B.E. and  Kalvin, A.D. - Why Should Engineers and Scientists%         Be Worried About Color?%         www.research.ibm.com/people/l/lloydt/color/color.HTM%%     9)  Rogowitz, B.E. and  Kalvin, A.D. - How NOT to Lie with Visualization%         www.research.ibm.com/dx/proceedings/pravda/truevis.htm%%     10) Wang, L. and Mueller,K (2008) - Harmonic Colormaps for Volume Visualization%         IEEE/ EG Symposium on Volume and Point-Based Graphics%         http://www.cs.sunysb.edu/~mueller/papers/vg08_final.pdf%%     11) Wyszecki, G. and Stiles W. S. (2000) - Color Science: Concepts and%         Methods, Quantitative Data and Formulae, 2nd Edition, John Wiley and Sons%%     12) Niccoli, M., (2012) - How to assess a color map - in:%         52 things you should know about Geophysics, M. Hall and E. Bianco,%         eds.%%     13) Niccoli, M., and Lynch, S. (2012, in press) - A more perceptual color%         palette for structure maps, 2012 CSEG Geoconvention extended%         abstract.%%     14) Color Blind Essentials eBook%         http://www.colblindor.com/color-blind-essentials/%%     15) Eddins, S. (2006) - A Lab-based uniform color scale%         http://blogs.mathworks.com/steve/2006/05/09/a-lab-based-uniform-color-scale/%%%  Author: Matteo Niccoli%  e-mail address: matteo@mycarta.ca%  Release: 4.04%  Release date: November 2014%  Full research at:%  http://mycarta.wordpress.com/2012/05/29/the-rainbow-is-dead-long-live-the-rainbow-series-outline/% error checking, defaultsnarginchk(0,2)nargoutchk(0,1)if nargin<2    scheme = 'CubicYF';endif nargin<1    n = size(get(gcf,'colormap'),1);endif n>256    error('Maximum number of 256 points for colormap exceeded');endif n<2    error('n must be >= 2');end% valid schemesswitch lower(scheme)    case 'linearl'        baseMap = LinearL;    case 'isol'        baseMap = IsoL;    case 'linlhot'        baseMap = LinLhot;    case 'cubicl'        baseMap = CubicL;    case 'edge'        baseMap = Edge;    case 'cubicyf'        baseMap = CubicYF;    case 'isoaz'        baseMap = IsoAZ;    case 'isoaz180'        baseMap = IsoAZ180;    case 'swtth'        baseMap = Swtth;    case 'plasma'        baseMap = Plasma;    case 'inferno'        baseMap = Inferno;    case 'extkind'        baseMap = ExtKind;    case 'mycustom'        baseMap = mycustom;    otherwise        error(['Invalid scheme ' scheme])end% interpolating to get desired number of points/colors, nidx1 = linspace(1,n,size(baseMap,1));idx2 = 1:1:n;map = interp1(idx1,baseMap,idx2,'pchip');map = max(map,0); % eliminate occasional, small negative numbers% occurring at one end of the Edge colormap because of% cubic interpolation% colormap subfunctionsfunction baseMap = EdgebaseMap =    [0 0 0;    0 0 1;    0 1 1;    1 1 1;    1 1 0;    1 0 0    0 0 0];endfunction baseMap = IsoLbaseMap =   [0.9102    0.2236    0.8997    0.4027    0.3711    1.0000    0.0422    0.5904    0.5899    0.0386    0.6206    0.0201    0.5441    0.5428    0.0110    1.0000    0.2288    0.1631];endfunction baseMap = CubicLbaseMap =  [0.4706         0    0.5216;    0.5137    0.0527    0.7096;    0.4942    0.2507    0.8781;    0.4296    0.3858    0.9922;    0.3691    0.5172    0.9495;    0.2963    0.6191    0.8515;    0.2199    0.7134    0.7225;    0.2643    0.7836    0.5756;    0.3094    0.8388    0.4248;    0.3623    0.8917    0.2858;    0.5200    0.9210    0.3137;    0.6800    0.9255    0.3386;    0.8000    0.9255    0.3529;    0.8706    0.8549    0.3608;    0.9514    0.7466    0.3686;    0.9765    0.5887    0.3569];endfunction baseMap = CubicYFbaseMap =  [0.5151    0.0482    0.6697    0.5199    0.1762    0.8083    0.4884    0.2912    0.9234    0.4297    0.3855    0.9921    0.3893    0.4792    0.9775    0.3337    0.5650    0.9056    0.2795    0.6419    0.8287    0.2210    0.7123    0.7258    0.2468    0.7612    0.6248    0.2833    0.8125    0.5069    0.3198    0.8492    0.3956    0.3602    0.8896    0.2919    0.4568    0.9136    0.3018    0.6033    0.9255    0.3295    0.7066    0.9255    0.3414    0.8000    0.9255    0.3529];endfunction baseMap = LinearLbaseMap =  [0.0143	0.0143	0.0143    0.1413	0.0555	0.1256    0.1761	0.0911	0.2782    0.1710	0.1314	0.4540    0.1074	0.2234	0.4984    0.0686	0.3044	0.5068    0.0008	0.3927	0.4267    0.0000	0.4763	0.3464    0.0000	0.5565	0.2469    0.0000	0.6381	0.1638    0.2167	0.6966	0.0000    0.3898	0.7563	0.0000    0.6912	0.7795	0.0000    0.8548	0.8041	0.4555    0.9712	0.8429	0.7287    0.9692	0.9273	0.8961];endfunction baseMap = LinLhotbaseMap =  [0.0225	0.0121	0.0121    0.1927	0.0225	0.0311    0.3243	0.0106	0.0000    0.4463	0.0000	0.0091    0.5706	0.0000	0.0737    0.6969	0.0000	0.1337    0.8213	0.0000	0.1792    0.8636	0.0000	0.0565    0.8821	0.2555	0.0000    0.8720	0.4182	0.0000    0.8424	0.5552	0.0000    0.8031	0.6776	0.0000    0.7659	0.7870	0.0000    0.8170	0.8296	0.0000    0.8853	0.8896	0.4113    0.9481	0.9486	0.7165];endfunction baseMap = IsoAZbaseMap =  [1.0000	0.2627	1.0000    0.9765	0.2941	1.0000    0.9373	0.3255	1.0000    0.8824	0.3647	1.0000    0.8157	0.4078	1.0000    0.7451	0.4549	1.0000    0.6471	0.5137	0.9961    0.4902	0.5882	0.9765    0.3020	0.6745	0.9412    0.1333	0.7490	0.9020    0.0235	0.8000	0.8510    0.0000	0.8196	0.7961    0.0000	0.8275	0.6980    0.0000	0.8314	0.5725    0.0000	0.8353	0.4353    0.0000	0.8392	0.3137    0.0000	0.8392	0.2275    0.0588	0.8353	0.1647    0.1961	0.8196	0.1059    0.3725	0.7961	0.0549    0.5490	0.7686	0.0196    0.6824	0.7412	0.0000    0.7647	0.6941	0.0039    0.8431	0.6157	0.0275    0.9098	0.5176	0.0627    0.9647	0.4275	0.1098    0.9961	0.3569	0.1647    1.0000	0.3255	0.2275    1.0000	0.3059	0.3294    1.0000	0.2863	0.4667    1.0000	0.2745	0.6314    1.0000	0.2667	0.8235];endfunction baseMap = IsoAZ180baseMap =  [0.8658	0.5133	0.6237    0.8122	0.5287	0.7241    0.7156	0.5599	0.8091    0.5800	0.5973	0.8653    0.4109	0.6327	0.8834    0.2041	0.6607	0.8603    0.0000	0.6887	0.8071    0.0000	0.6938	0.7158    0.2144	0.6885	0.6074    0.3702	0.6803	0.5052    0.4984	0.6637	0.4192    0.6123	0.6391	0.3635    0.7130	0.6074	0.3492    0.7958	0.5719	0.3787    0.8532	0.5389	0.4445    0.8773	0.5170	0.5348    0.8658	0.5133	0.6237    0.8122	0.5287	0.7241    0.7156	0.5599	0.8091    0.5800	0.5973	0.8653    0.4109	0.6327	0.8834    0.2041	0.6607	0.8603    0.0000	0.6887	0.8071    0.0000	0.6938	0.7158    0.2144	0.6885	0.6074    0.3702	0.6803	0.5052    0.4984	0.6637	0.4192    0.6123	0.6391	0.3635    0.7130	0.6074	0.3492    0.7958	0.5719	0.3787    0.8532	0.5389	0.4445    0.8773	0.5170	0.5348];endfunction baseMap = SwtthbaseMap =  [1.0000	0.5395	1.0000    1.0000	0.5060	1.0000    1.0000	0.4721	1.0000    1.0000	0.4377	1.0000    0.9746	0.4026	1.0000    0.8759	0.3666	1.0000    0.7774	0.3294	1.0000    0.6789	0.2906	1.0000    0.5802	0.2499	1.0000    0.4803	0.2065	1.0000    0.3772	0.1589	1.0000    0.2644	0.1033	1.0000    0.1100	0.0220	1.0000    0.0000	0.0868	0.9879    0.1235	0.1246	1.0000    0.1917	0.2207	1.0000    0.2187	0.3086	1.0000    0.2246	0.3914	1.0000    0.2179	0.4698	1.0000    0.2037	0.5446	1.0000    0.1847	0.6166	1.0000    0.1618	0.6864	1.0000    0.1342	0.7546	1.0000    0.0988	0.8218	1.0000    0.0421	0.8882	1.0000    0.0000	0.9560	0.9951    0.0000	0.9724	0.9345    0.0000	0.9348	0.8244    0.0000	0.8956	0.7181    0.0000	0.8551	0.6170    0.0000	0.8137	0.5236    0.0000	0.7718	0.4409    0.0000	0.7294	0.3730    0.0000	0.6868	0.3235    0.0000	0.6438	0.2933    0.0000	0.5996	0.2752    0.0000	0.5517	0.2474    0.0000	0.5003	0.2065    0.0000	0.4455	0.1476    0.0000	0.4723	0.1742    0.0000	0.5231	0.2118    0.0000	0.5684	0.2279    0.0000	0.6074	0.2202    0.0000	0.6389	0.1747    0.0374	0.6634	0.0000    0.2443	0.7077	0.0000    0.3707	0.7499	0.0000    0.4848	0.7901	0.0000    0.5951	0.8281	0.0000    0.7044	0.8642	0.0000    0.8139	0.8982	0.0000    0.9237	0.9305	0.0000    0.9273	0.8577	0.0000    0.9299	0.7840	0.0000    0.9311	0.7089	0.0000    0.9303	0.6322	0.0000    0.9268	0.5533	0.0000    0.9197	0.4714	0.0000    0.9077	0.3853	0.0000    0.8897	0.2921	0.0000    0.8643	0.1826	0.0000    0.8319	0.0000	0.0159    0.8020	0.0000	0.1461    0.7606	0.0000	0.1769];endfunction baseMap = PlasmabaseMap =  [0.001461996	0.000465991	0.013866006    0.002266906	0.001269897	0.01856949    0.003299036	0.002249018	0.024239243    0.004546897	0.003391884	0.030908513    0.006006105	0.004692061	0.038558624    0.007675919	0.006135892	0.046835705    0.009561203	0.007713116	0.055143939    0.011662969	0.009416915	0.063459981    0.013994708	0.011224702	0.0718611    0.016561056	0.013135954	0.080282289    0.019372743	0.015132717	0.088766374    0.022447194	0.017198997	0.097327593    0.025792823	0.019330743	0.105929639    0.029432387	0.021503037	0.114621902    0.033384911	0.023701777	0.123396942    0.037667476	0.025920507	0.132230966    0.042253067	0.028138807	0.141141258    0.046914584	0.030323541	0.150163265    0.051644252	0.032473827	0.159254584    0.056448714	0.034568571	0.168413579    0.061340445	0.03658983	0.177642922    0.066330851	0.038503594	0.186961901    0.071428265	0.040293399	0.196352864    0.076637023	0.041904611	0.205799234    0.081961425	0.043327451	0.215288189    0.087411215	0.044555604	0.224813571    0.0929896	0.045582467	0.234357523    0.098702428	0.046401561	0.243904906    0.104550791	0.047007449	0.253429862    0.110536672	0.047398454	0.262913228    0.116656001	0.047573394	0.272321196    0.122907312	0.047535367	0.281623172    0.12928523	0.047292302	0.290788508    0.135777516	0.046855311	0.299775521    0.142378474	0.046241177	0.308553787    0.149072738	0.04546721	0.317084851    0.155850727	0.044558026	0.325339017    0.162688976	0.043553074	0.333277144    0.169574219	0.04248814	0.340873308    0.176493222	0.04140092	0.348111379    0.18342846	0.04032796	0.354970625    0.190367467	0.039307767	0.361447559    0.197296707	0.038398814	0.367534891    0.204209709	0.037630669	0.373238687    0.211094953	0.03702868	0.378563101    0.217948203	0.036613674	0.383521556    0.224763195	0.036403574	0.388129248    0.231537453	0.036403518	0.392399779    0.238273432	0.036619493	0.396353353    0.244966698	0.037053387	0.400006952    0.251620664	0.037703436	0.403378422    0.258233938	0.038569281	0.406485081    0.264809219	0.039645099	0.409344767    0.271347172	0.040920249	0.411976167    0.27784946	0.042351066	0.414391902    0.284321401	0.043931272	0.416608225    0.290762695	0.045642067	0.418637002    0.297178628	0.047468322	0.420491262    0.303567926	0.049394099	0.422182076    0.309934231	0.051404866	0.423720908    0.316282154	0.053488154	0.425116123    0.322609462	0.05563191	0.426376984    0.32892138	0.05782522	0.427511151    0.33521669	0.060057969	0.42852404    0.341500605	0.062323292	0.429425165    0.347770916	0.064614036	0.430217078    0.354031232	0.066922776	0.430906004    0.360284141	0.069245107	0.431497099    0.366528458	0.071576844	0.431994045    0.372768365	0.073913178	0.432400106    0.379000682	0.076250915	0.432719071    0.385228588	0.078589247	0.432955102    0.391452905	0.080924985	0.433109085    0.397673225	0.083254721	0.433183078    0.403894128	0.085578052	0.433179086    0.410112448	0.087893789	0.433098095    0.416331352	0.090201117	0.432943075    0.42254867	0.092498856	0.4327141    0.428768575	0.094788178	0.432412054    0.434986892	0.097066919	0.432039095    0.441207798	0.099336237	0.431594024    0.447428115	0.10159498	0.431080079    0.453650434	0.103845722	0.430498143    0.459875339	0.106087037	0.429846052    0.466099656	0.108319781	0.429125131    0.472328562	0.110545093	0.428334015    0.478557879	0.112761838	0.427475109    0.484789786	0.114972146	0.426547968    0.491022101	0.117176893	0.425552077    0.497256419	0.119376638	0.424488194    0.503493325	0.121572946	0.423356034    0.509729641	0.123766692	0.422156165    0.515967548	0.125957997	0.42088698    0.522205864	0.128147745	0.419549127    0.528444772	0.130339049	0.418141918    0.534683087	0.132531796	0.416667079    0.540919404	0.134726542	0.415123249    0.54715731	0.136926848	0.41351102    0.553391627	0.139131593	0.411829205    0.559624532	0.141343901	0.41007795    0.565853849	0.143564644	0.40825815    0.572081755	0.145794955	0.406368871    0.578304071	0.148036697	0.404411086    0.584520391	0.150291436	0.402385309    0.590734293	0.152560752	0.40029001    0.596939613	0.154845488	0.398125248    0.603139514	0.15714881	0.395890924    0.609329835	0.159471543	0.393589177    0.615513733	0.161814872	0.391218829    0.621685055	0.164181601	0.388781097    0.627846381	0.166572326	0.386276373    0.633998275	0.168989664	0.383704005    0.640134602	0.171435384	0.381065296    0.646260492	0.173911732	0.378358904    0.652368822	0.176418446	0.375586209    0.658463707	0.178959807	0.372747794    0.66454004	0.181536514	0.369846112    0.670598376	0.184150217	0.36687944    0.676638255	0.18680459	0.363849006    0.682655595	0.189498285	0.360757346    0.688653467	0.192236673	0.35760289    0.694626811	0.19501836	0.354388243    0.700576675	0.197848765	0.351112766    0.706500025	0.200725442	0.347777132    0.712395379	0.203653113	0.344383506    0.718264234	0.206633535	0.340931011    0.724102594	0.209667196	0.337424397    0.729909438	0.212756638	0.333860882    0.735682805	0.215903287	0.33024528    0.741423638	0.219109751	0.326575746    0.747127012	0.222375389	0.322856154    0.752794832	0.225703875	0.319084604    0.758422213	0.229094502	0.315266021    0.7640096	0.23255112	0.311399447    0.769556408	0.236074627	0.307484881    0.775058804	0.239664232	0.303526317    0.780517596	0.243324764	0.299522736    0.785929002	0.247053355	0.295477179    0.791293776	0.250853914	0.291389585    0.796607192	0.25472549	0.287264036    0.801870615	0.258671058	0.283099496    0.807082375	0.262689639	0.278897887    0.812238809	0.266783192	0.274661354    0.817341549	0.270951801	0.270389734    0.822385995	0.275194338	0.266085206    0.827372715	0.279514975	0.261749577    0.832299173	0.283910496	0.257383054    0.83716464	0.288382009	0.25298854    0.841969341	0.292930669	0.248563899    0.846708821	0.297556166	0.244113389    0.8513845	0.302257854	0.23963574    0.855991994	0.307035334	0.235133234    0.860533648	0.311890051	0.230605579    0.865006157	0.316819514	0.226055075    0.869408674	0.321823971	0.221482583    0.873741308	0.326903709	0.216885915    0.878000841	0.332057149	0.212268425    0.882188449	0.337284914	0.207627752    0.886301998	0.342583338	0.202968263    0.890341579	0.34795513	0.198285587    0.894305144	0.353396538	0.193584098    0.898191718	0.358907941	0.188860625    0.902003278	0.364489751	0.184115933    0.905734868	0.370137138	0.179350461    0.9093904	0.375853973	0.174562767    0.912966007	0.381633345	0.169755294    0.91646251	0.387479205	0.164923597    0.919879135	0.393386562	0.160070124    0.92321477	0.399355914	0.15519367    0.92647025	0.405386789	0.150291954    0.929643901	0.411476128	0.145367502    0.932737352	0.417625025	0.140416782    0.935747022	0.42382835	0.135440329    0.938675443	0.430089268	0.130437608    0.94152113	0.43640258	0.125409152    0.944284828	0.442768888	0.120354723    0.946965226	0.449188819	0.115271976    0.949561941	0.455657116	0.110164548    0.952075309	0.462176065	0.1050308    0.954506041	0.46874135	0.099874368    0.956852379	0.475354318	0.094694623    0.95911413	0.482011591	0.089499184    0.961293438	0.488714575	0.084288447    0.963387206	0.495459838	0.079073002    0.965396986	0.502246099	0.073859591    0.967322269	0.509076093	0.06865883    0.969163066	0.515943343	0.063488401    0.970919319	0.522851351	0.058366667    0.972590135	0.529795592	0.053324211    0.974176357	0.536778614	0.04839153    0.975677191	0.543795846	0.043618036    0.977092036	0.550847077	0.039050553    0.978422233	0.557935106	0.034930917    0.979666096	0.565054328	0.031409299    0.980824262	0.57220737	0.028507884    0.981895144	0.579389584	0.026250126    0.98288128	0.586604637	0.02466095    0.98377918	0.593846843	0.023770046    0.984591091	0.601119048	0.023606059    0.985315201	0.608420107	0.024202092    0.985952131	0.615747305	0.025591934    0.98650221	0.623103375	0.027814257    0.986964158	0.630482566	0.030907915    0.987337206	0.637888645	0.03491656    0.987622173	0.645317829	0.039886018    0.987819152	0.652770013	0.045580403    0.987926173	0.660248097	0.051750246    0.987945171	0.667745274	0.058328526    0.98787416	0.675265366	0.065257524    0.987714177	0.682804539	0.072488721    0.987464135	0.690364638	0.079990834    0.98712417	0.697941805	0.087730963    0.986694219	0.705536972	0.095693105    0.986175149	0.713151074	0.103863256    0.985566216	0.720779237	0.112228344    0.984865114	0.728425345	0.120785579    0.9840752	0.736084503	0.129526615    0.983196068	0.743756617	0.138453928    0.982228171	0.751439772	0.147564913    0.981173289	0.759131927	0.156861905    0.980032128	0.766835041	0.16635325    0.978806263	0.774542194	0.176036194    0.977497074	0.782256311	0.185923621    0.976108225	0.789971462	0.19601751    0.974638008	0.79769058	0.206333024    0.973088174	0.80540673	0.216876856    0.971468356	0.813118881	0.227656681    0.969783113	0.820822997	0.238686244    0.968041305	0.82851215	0.249971012    0.966243044	0.836189261	0.261534678    0.964394245	0.843845417	0.273390376    0.962516973	0.851474519	0.285547155    0.960626175	0.859066682	0.298009779    0.958719904	0.866622769	0.310821685    0.956834105	0.874126939	0.323974236    0.954997308	0.881566118	0.33747376    0.953215046	0.888940185	0.351369754    0.951546227	0.89622338	0.36562619    0.950018012	0.903407413	0.380272326    0.948683153	0.910470631	0.395288673    0.947594028	0.917397614	0.410666943    0.946809109	0.924165862	0.426373213    0.946392156	0.93075813	0.442365463    0.946403131	0.937157061	0.458592799    0.946903074	0.943345372	0.474969002    0.947937233	0.949316225	0.491427385    0.949545051	0.955060585	0.507859578    0.95174042	0.960585357	0.524204936    0.95452911	0.965893762	0.540361156    0.95789574	0.971000189	0.556273412    0.961812267	0.975921904	0.571925695    0.966248777	0.980675368	0.587205018    0.971162487	0.985280023	0.602155186    0.976510896	0.989750518	0.616759582    0.982257755	0.994107129	0.631018626];endfunction baseMap = InfernobaseMap = [0	0	42	1	104	3	197	5	2711	7	3616	9	4621	11	5627	12	6534	12	7540	11	8448	10	9155	9	9762	9	10269	10	10575	12	10782	14	10988	16	11095	19	110101	21	110108	24	110114	26	110120	28	109127	30	108133	33	107140	35	105146	37	104153	40	101159	42	99165	45	96172	47	93178	50	90184	53	87190	56	83196	60	79201	64	75207	68	70212	72	66217	77	61221	82	57226	87	52230	93	47234	99	42237	105	37240	111	32243	118	27245	125	21247	132	16249	139	11250	146	7251	154	6252	161	8252	169	14252	177	21251	185	30250	193	39249	201	49247	209	60246	217	72244	224	85242	232	100241	239	116243	245	133246	250	150252	255	164]./255;end    function baseMap = ExtKind        baseMap = [0	0	017	1	1726	1	3129	2	4630	3	6227	4	7624	4	8920	5	10216	5	1136	13	1205	26	1135	37	1034	45	924	52	844	58	763	63	703	68	653	73	604	78	534	82	454	87	364	92	265	96	155	101	612	105	520	109	533	113	548	116	665	119	681	121	698	122	6115	123	6132	123	6152	122	7174	119	8200	111	10227	99	11245	92	35246	99	62246	107	76247	114	90248	120	112249	125	135249	130	159249	134	181249	139	202250	143	222250	147	240244	156	250233	169	251227	179	251223	187	252222	194	252223	200	252225	206	253228	211	253231	217	253232	223	253233	229	254234	236	254235	242	254238	247	254243	252	254255	255	255]./255;    end    function baseMap = mycustom        baseMap = [            1 0 0            1 .67 0            0 1 .67            0 0 1            .67 0 1            1 .65 .65];    endend